/*** @author admin*/(function(){    var    __Agenda		= model.Agenda 				= {},    __entityMethods	= __Agenda.entityMethods	= {},    __methods		= __Agenda.methods			= {},    timeRegex		= /^([01]?[0-9]) *: *([0-5]?[0-9]) *([pa]m)$/i;		function parseTime(value){		var		res  	= {},		regExec = timeRegex.exec(value);					if(!regExec || regExec.length != 4 || regExec[1] > 12){			return null;		}				res.hours	= parseInt(regExec[1]);		res.minutes	= parseInt(regExec[2]);		res.am		= regExec[3].toLowerCase() == 'am';				return res;	}		__Agenda.from = {		onGet:function(){			var			hours 	= this.from_hours?this.from_hours:'0',			minutes	= this.from_minutes,			am		= this.from_am == false ? 'PM' : 'AM';						if(!minutes){				minutes = '00';			}			else if((minutes + '').length == 1){				minutes = '0' + minutes;			}						return hours + ':' + minutes + ' ' + am;		},		onSet:function(value){			var res = parseTime(value);						if(res){				this.from_hours 	= res.hours;				this.from_minutes 	= res.minutes;				this.from_am 		= res.am;			}						this.fixTime();		}	}	__Agenda.to = {		onGet:function(){			var			hours 	= this.to_hours?this.to_hours:'0',			minutes	= this.to_minutes,			am		= this.to_am == false ? 'PM' : 'AM';						if(!minutes){				minutes = '00';			}			else if((minutes + '').length == 1){				minutes = '0' + minutes;			}						return hours + ':' + minutes + ' ' + am;		},		onSet:function(value){			var res = parseTime(value);						if(res){				this.to_hours 	= res.hours;				this.to_minutes = res.minutes;				this.to_am 		= res.am;			}						this.fixTime();		}	}		__entityMethods.timeToNumber = function(from){		var time = from ? 'from_' : 'to_';		return this[time + 'hours']*60 + this[time + 'minutes'] + (this[time + 'am'] ? 0 : 1)*12*60;	}		__methods.numberToTime = function(number){		var		res = {},		max = 23*60+59;						if(number > max){			number = max;		}				res.am		= true;		res.hours 	= parseInt(number/60),		res.minutes	= number - res.hours*60;				if(res.hours > 12){			am = false;			res.hours -= 12;		}				return res;	}		__entityMethods.fixTime = function(){		var		max 	= 23*60+59,		fromNb	= this.timeToNumber(true),		toNb	= this.timeToNumber();				if(fromNb > toNb){			if(fromNb == max){				this.to = this.from;				return;			}						var			res = this.getDataClass().numberToTime(fromNb + 1);						this.to_hours 	= res.hours;			this.to_minutes = res.minutes;			this.to_am 		= res.am;		}	}		__entityMethods.getWorkingDays = function(){		var		res = [],		attrs = ['sun' , 'mon' , 'tue' , 'wed' , 'thu' , 'fri' , 'sat'];				for(var i = 0 , attr ; attr = attrs[i] ; i++){			if(this[attr]){				res.push(i);			}		}				return res;	}})();