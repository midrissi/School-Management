function Item(){	this._meta 			= {		hash 	: {},		name	: ''	};	this._attributes	= {};}Item.prototype.getAllMeta = function(){	return this._meta;}Item.prototype.getMeta = function(name){	return this._meta[name];}Item.prototype.setMeta = function(arg1 , arg2){	if(arg1 instanceof String){		if(arg2){			this._meta[name] = arg2;		}	}	else{		this._meta = arg1;	}}Item.prototype.addMeta = function(name , value){	this._meta[name] = new Attribute(value);}Item.prototype.getAttributes = function(){	return this._attributes;}Item.prototype.getAttribute = function(name , force){	var	res = this._attributes[name];		if(!res){		res = this.getByHashName(name);				if(!res && force){			this.addAttribute({name : name , hashName : name})			return this._attributes[name];		}	}		return res;}Item.prototype.getByHashName = function(name){	var	hash 	= this.getMeta('hash'),	attribs	= this.getAttributes();		for(var hashAttr in hash){		if(hash[hashAttr] == name){			return attribs[hashAttr];		}	}		return null;}Item.prototype.addAttribute = function(config){	if(config instanceof Item){		this._attributes[generateUUID()] = new Attribute(config);	}	else{		if(config.name && config.hashName){			this._meta.hash[config.name] = config.hashName;		}		if(config.name){			this._attributes[config.name] = new Attribute(config);		}	}}Item.prototype.addItem = function(item){	if(item instanceof Item){		this.addAttribute(item);	}}Item.prototype.toString = function(){	var	res 	= 'BEGIN:' + this.getMeta('name') + '\n',	attribs	= this.getAttributes();		for(var attrib in attribs){		if(attribs.hasOwnProperty(attrib)){			res += attribs[attrib].toString();		}	}		res += 'END:' + this.getMeta('name');		return res;}Item.prototype.saveToFile = function(file , charset){	if(charset){		saveText(this.toString() , file , charset);	}		saveText(this.toString() , file);}