function Randomizer(DCs){	if(DCs instanceof Array){		for(var i = 0 , dc ; dc = DCs[i] ; i++){			this.initDC(dc);		}	}}Randomizer.prototype.initDC = function(dcName , force){	if(ds[dcName]){		var attr = this['_' + dcName.toLowerCase() + 's'];		if(!attr || force){			attr = this['_' + dcName.toLowerCase() + 's'] = ds[dcName].toArray('ID');						for(var item in attr){				attr[item] = attr[item]['ID'];			}		}				return attr;	}		return [];}Randomizer.prototype.getRandom = function(dcName , initQuery){	var attr = this['_' + dcName.toLowerCase() + 's'];		if(!attr || attr.length <= 0){		attr = this.initDC(dcName , true);	}		if(attr.length == 0){		return null;	}		return attr[parseInt(Math.random()*attr.length)];}Randomizer.prototype.getRandomFromCollection = function(collection){	var attr = collection.toArray('ID');				for(var item in attr){		attr[item] = attr[item]['ID'];	}		return attr[parseInt(Math.random()*attr.length)];}Randomizer.prototype.getAll = function(dcName){	return this['_' + dcName.toLowerCase() + 's'];}function getCalendar(config) {	var    cal,    ERRORS,    calModule,    sessionRef,    calendarMeta,    directoryROLES;        config 			= ds.Utils.extend(__myNameSpace.Calendar, config);    calModule 		= require('iCalendar');    cal 			= new calModule.Calendar();    calendarMeta 	= config.meta;    ERRORS 			= __myNameSpace.ERRORS;    directoryROLES 	= __myNameSpace.DirectoryROLES;    sessionRef 		= currentSession();    if (!sessionRef.belongsTo(directoryROLES.LOGGEDIN)) {        return ERRORS.login.notConnected;    }    /********************** @Begin: Set the calendar attributes **********************/    for (var _attr in config ) {        if (config.hasOwnProperty(_attr) && _attr != 'meta') {            cal.getAttribute(_attr, true).setValue(config[_attr]);        }    }    try {        var        _attr,        calEvents,        eventMeta,        addTheEvent;                calEvents 	= calendarMeta.EVENT;        eventMeta 	= calendarMeta.EVENT.meta;        addTheEvent = false;        if (eventMeta && eventMeta.display) {            addTheEvent = true;        }        else if (eventMeta.display != false) {            addTheEvent = true;        }        if (addTheEvent) {            eval(calendarMeta.TimeTableDC).forEach(function(tt) {                var                event = new calModule.Event();                if (typeof eventMeta.display == 'function') {                    addTheEvent = eventMeta.display.call(calEvents, tt);                }                if (addTheEvent) {                    /********************** Set the event attributes **********************/                    for (_attr in calEvents) {                        if (calEvents.hasOwnProperty(_attr) && _attr != 'meta') {                            try {                                var                                regex = new RegExp(calEvents.meta.jocker, 'g'),                                str = calEvents[_attr].replace(regex, 'tt'),                                value = eval(str);                                event.getAttribute(_attr, true).setValue(value);                            }                            catch (e) {                                event.getAttribute(_attr, true).setValue(calEvents[_attr]);                            }                        }                    }                    if (calEvents.meta.alarm) {                        var                        alarm,                        calAlarm,                        addTheAlarm;                                                calAlarm 	= calEvents.meta.alarm;                        alarm 		= new calModule.Alarm();                        addTheAlarm = false;                        if (!calAlarm.meta) {                            addTheAlarm = true;                        }                        else if (calAlarm.meta.display) {                            var                            launcher = calAlarm.meta.display;                            switch (typeof launcher) {                                case 'function':                                    if (launcher.call(calAlarm, tt)) {                                        addTheAlarm = true;                                    }                                    break;                                default:                                    if (launcher) {                                        addTheAlarm = true;                                    }                                    break;                            }                        }                        else if (calAlarm.meta.display != false) {                            addTheAlarm = true;                        }                        if (addTheAlarm) {                            /********************** Set the alarm attributes **********************/                            for (_attr in calAlarm) {                                if (calAlarm.hasOwnProperty(_attr) && _attr != 'meta') {                                    alarm.getAttribute(_attr, true).setValue(calAlarm[_attr]);                                }                            }                            event.addItem(alarm);                        }                    }                    cal.addItem(event);                }            });        }    }    catch (e) {        return cal.toString();    }    return cal.toString();}function isBrowser(userAgent){	var	userAgents 	= ['mozilla' , 'dillo' , 'elink' , 'enigma' , 'galaxy' , 'hotjava' ,					'ibm webexplorer' , 'ibrowser' , 'icab' , 'leechcraft' , 'links' ,					'lynx' , 'uzbl' , 'surf' , 'sundance' , 'seamonkey' , 'vimprobable' , 					'w3m' , 'worldwideweb' , 'opera' , 'ncsa' , 'netsurf'];						function startWith( str , matcher){		return new RegExp("^" + matcher , 'i').test(str);	}		for(var _i = 0  , matcher ; matcher = userAgents[_i] ; _i++){		if(startWith(userAgent , matcher)){			return true;		}	}		return false;}function getVacancyTypes(withDetails){	var	type 	= __myNameSpace.School.TIME_TABLE.VACANCY_TYPES,	result	= [];		for(var i in type){		var obj;		if(withDetails){			obj = {				name	: i,				title	: type[i].title,				value	: type[i].value			}		}		else{			obj = type[i].value;		}				result.push(obj);	}		return result;}function getVacancyType(value){	var	type 	= __myNameSpace.School.TIME_TABLE.VACANCY_TYPES;		for(var i in type){		if(value == type[i].value){			return {				name	: i,				title	: type[i].title,				value	: type[i].value			}		}	}		return null;}exports.getCalendar = getCalendar;exports.isBrowser = isBrowser;exports.getVacancyTypes = getVacancyTypes;exports.getVacancyType = getVacancyType;exports.Randomizer = Randomizer;